[
  {
    "title": "AI File Organizer",
    "slug": "ai-file-organizer",
    "description": "A tool that organizes codebases for AI analysis, making it easier for language models to understand project structures.",
    "github": "https://github.com/samscho98/ai-organizer",
    "private": false,
    "featured": true,
    "content": "# AI File Organizer\n\nThis project helps developers organize their codebases for AI analysis. It automatically scans through your project directories, identifies key components, and generates a structured representation that makes it easier for AI assistants like Claude to understand your codebase.\n\n## Features\n\n- **Automatic File Organization**: Scans your project and organizes files by type, importance, and relevance\n- **Code Structure Analysis**: Identifies important components, functions, and classes\n- **Intelligent Categorization**: Uses AI to categorize code by functionality\n- **Integration with Claude AI**: Optimized for Claude's context window\n\n## Technical Details\n\nBuilt with Python and Flask, the application uses advanced text processing algorithms to parse and organize code files.\n\n### Technologies Used\n\n- Python 3.9+\n- Flask for API endpoints\n- Natural Language Processing for code understanding\n- SQLite for lightweight database storage\n\n## Implementation\n\nThe core functionality is implemented using a recursive directory scanning algorithm that walks through your project, analyzing file content and determining importance based on several heuristics:\n\n```python\ndef scan_project(directory):\n    important_files = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if is_important(file):\n                important_files.append(os.path.join(root, file))\n    return important_files\n```\n\nThe file importance is calculated based on size, modification date, and content analysis:\n\n```python\ndef is_important(file):\n    # Check file extension\n    if not file.endswith(('.py', '.js', '.java', '.cpp', '.md')):\n        return False\n        \n    # Check file size (prioritize non-trivial files)\n    if os.path.getsize(file) < 100:\n        return False\n        \n    # Analyze content\n    with open(file, 'r', encoding='utf-8', errors='ignore') as f:\n        content = f.read()\n        if 'import' in content or 'function' in content or 'class' in content:\n            return True\n            \n    return False\n```\n\n## Future Improvements\n\n- Add support for more programming languages\n- Implement machine learning for better code classification\n- Create a web UI for easier interaction\n- Add export options for different AI assistant platforms",
    "tags": ["Python", "Flask", "AI Tools", "Automation"]
  },
  {
    "title": "E-Commerce Dashboard",
    "slug": "ecommerce-dashboard",
    "description": "A comprehensive analytics dashboard for online retail stores, providing real-time insights into sales and customer behavior.",
    "github": "https://github.com/samscho98/ecommerce-dashboard",
    "private": false,
    "featured": true,
    "content": "# E-Commerce Dashboard\n\nA comprehensive analytics solution for online retail businesses. This dashboard provides real-time insights into sales, customer behavior, and inventory management.\n\n## Features\n\n- **Real-time Sales Tracking**: Monitor sales as they happen with live updating charts\n- **Customer Behavior Analysis**: Understand shopping patterns and preferences\n- **Inventory Management**: Track stock levels and receive low inventory alerts\n- **Customizable Reports**: Generate detailed reports for any date range\n\n## Technical Details\n\nBuilt with a React frontend, Node.js backend, and MongoDB for data storage. Uses Chart.js for data visualization.\n\n### Technology Stack\n\n- **Frontend**: React with Redux for state management\n- **Backend**: Node.js and Express\n- **Database**: MongoDB\n- **Authentication**: JWT-based auth system\n- **Visualization**: Chart.js and D3.js\n\n## Implementation\n\nThe dashboard uses a microservices architecture with separate services for:\n\n1. User authentication\n2. Sales analytics\n3. Inventory management\n4. Reporting\n\nEach service communicates through a RESTful API, making the system highly scalable and maintainable.\n\nThe real-time updates are implemented using WebSockets:\n\n```javascript\n// Server-side code for pushing sales updates\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  // Send initial data\n  ws.send(JSON.stringify(getSalesData()));\n  \n  // Set up interval for real-time updates\n  const interval = setInterval(() => {\n    ws.send(JSON.stringify(getUpdatedSales()));\n  }, 5000);\n  \n  ws.on('close', () => {\n    clearInterval(interval);\n  });\n});\n```\n\n## Future Improvements\n\n- Add machine learning for sales predictions\n- Implement A/B testing tools for marketing campaigns\n- Create a mobile app version\n- Add integration with more payment processors",
    "tags": ["React", "Node.js", "MongoDB", "JavaScript"]
  },
  {
    "title": "Portfolio Website",
    "slug": "portfolio-website",
    "description": "My personal portfolio website built with React and Flask, featuring dark mode and responsive design.",
    "github": "https://github.com/samscho98/portfolio-website",
    "private": false,
    "featured": true,
    "content": "# Portfolio Website\n\nThis project is my personal portfolio website, designed to showcase my work and skills as a developer. It features a clean, responsive design with dark mode support.\n\n## Features\n\n- **Responsive Design**: Works seamlessly on desktop, tablet, and mobile devices\n- **Dark Mode Support**: Toggle between light and dark themes\n- **Project Showcase**: Detailed pages for each project with descriptions and tech details\n- **Contact Form**: Easy way for potential clients to reach out\n\n## Technical Details\n\nThe portfolio uses React for the frontend and Flask for the backend API. The site is deployed on Render.com.\n\n### Technology Stack\n\n- **Frontend**: React with React Router for navigation\n- **Styling**: Tailwind CSS for flexible, responsive design\n- **Backend**: Python Flask API\n- **Database**: PostgreSQL for project data storage\n- **Theme Management**: Context API for dark/light mode\n\n## Implementation\n\nThe dark mode implementation uses React Context API to manage theme state across the entire application:\n\n```javascript\n// ThemeContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst ThemeContext = createContext();\n\nexport function ThemeProvider({ children }) {\n  const [theme, setTheme] = useState(() => {\n    // Check localStorage or default to dark\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme || 'dark';\n  });\n\n  useEffect(() => {\n    // Update HTML class when theme changes\n    document.documentElement.classList.toggle('dark', theme === 'dark');\n    \n    // Save preference to localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  return useContext(ThemeContext);\n}\n```\n\n## Future Improvements\n\n- Add blog functionality for tech articles\n- Implement project filtering by technology\n- Add animations for smoother transitions\n- Create a newsletter subscription option",
    "tags": ["React", "Flask", "Python", "Tailwind CSS"]
  },
  {
    "title": "Task Management API",
    "slug": "task-management-api",
    "description": "A RESTful API for task management applications with authentication, task organization, and team collaboration features.",
    "github": "https://github.com/samscho98/task-api",
    "private": false,
    "featured": false,
    "content": "# Task Management API\n\nA robust RESTful API built for task management applications, providing endpoints for task creation, organization, assignment, and team collaboration.\n\n## Features\n\n- **User Authentication**: JWT-based secure authentication system\n- **Task Management**: Create, read, update, and delete tasks\n- **Task Organization**: Group tasks into projects and categories\n- **Team Collaboration**: Assign tasks to team members and track progress\n- **Comments System**: Discuss tasks with threaded comments\n\n## Technical Details\n\nBuilt with Python Flask and PostgreSQL, this API follows RESTful principles and incorporates modern authentication practices.\n\n### Technology Stack\n\n- **Backend**: Python Flask with Flask-RESTful\n- **Database**: PostgreSQL with SQLAlchemy ORM\n- **Authentication**: JWT tokens with refresh capability\n- **Documentation**: Swagger/OpenAPI specification\n\n## API Endpoints\n\n### Authentication\n\n- `POST /api/auth/register` - Register a new user\n- `POST /api/auth/login` - Login and receive tokens\n- `POST /api/auth/refresh` - Refresh access token\n\n### Tasks\n\n- `GET /api/tasks` - List all tasks (with filtering options)\n- `POST /api/tasks` - Create a new task\n- `GET /api/tasks/{id}` - Get a specific task\n- `PUT /api/tasks/{id}` - Update a task\n- `DELETE /api/tasks/{id}` - Delete a task\n\n### Projects\n\n- `GET /api/projects` - List all projects\n- `POST /api/projects` - Create a new project\n- `GET /api/projects/{id}/tasks` - Get all tasks for a project\n\n## Implementation\n\nThe API uses a modular structure with blueprints for different resource types:\n\n```python\n# tasks.py\nfrom flask import Blueprint, request, jsonify\nfrom flask_jwt_extended import jwt_required, get_jwt_identity\nfrom .models import Task, db\n\ntasks_bp = Blueprint('tasks', __name__)\n\n@tasks_bp.route('/tasks', methods=['GET'])\n@jwt_required()\ndef get_tasks():\n    user_id = get_jwt_identity()\n    # Get query parameters for filtering\n    project_id = request.args.get('project_id')\n    status = request.args.get('status')\n    \n    # Build query\n    query = Task.query.filter_by(user_id=user_id)\n    if project_id:\n        query = query.filter_by(project_id=project_id)\n    if status:\n        query = query.filter_by(status=status)\n        \n    tasks = query.all()\n    return jsonify([task.to_dict() for task in tasks])\n```\n\n## Future Improvements\n\n- Add WebSocket support for real-time updates\n- Implement rate limiting for API protection\n- Add analytics endpoints for task completion metrics\n- Create a CI/CD pipeline for automated testing and deployment",
    "tags": ["Python", "Flask", "PostgreSQL", "API"]
  },
  {
    "title": "Client CRM System",
    "slug": "client-crm",
    "description": "A custom CRM solution developed for a marketing agency to manage client relationships and campaigns.",
    "private": true,
    "featured": false,
    "content": "# Client CRM System\n\nA private project developed for a marketing agency to manage their client relationships, campaigns, and analytics in one place.\n\n*This is a private client project — detailed write-up available upon request.*\n\n## My Contribution\n\nI designed and implemented the full-stack solution, including:\n\n- Client database architecture\n- Campaign management tools\n- Reporting and analytics dashboard\n- Integration with existing marketing tools\n\n## Technologies Used\n\nReact, PostgreSQL, Express, and various marketing APIs for integration purposes.",
    "tags": ["React", "PostgreSQL", "Express", "Private"]
  }
]